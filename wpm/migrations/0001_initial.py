# Generated by Django 3.1.14 on 2023-09-30 17:47

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='WireguardEndpoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, validators=[django.core.validators.RegexValidator(message='Name must be a fully qualified domain name.', regex='^[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$')])),
                ('ipv4_net', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='IPv4 network must be in CIDR notation, e.g., "192.168.0.0/24".', regex='^\\d+\\.\\d+\\.\\d+\\.\\d+/\\d+$')])),
                ('ipv6_net', models.CharField(blank=True, max_length=39, null=True, validators=[django.core.validators.RegexValidator(message='IPv6 network must be in CIDR notation, e.g., "2001:0db8::/32".', regex='^[0-9a-fA-F:/]+$')])),
                ('endpoint_ip', models.GenericIPAddressField()),
                ('endpoint_port', models.PositiveIntegerField()),
                ('public_key', models.CharField(max_length=44, validators=[django.core.validators.RegexValidator(message='Invalid wireguard public key.', regex='^[A-Za-z0-9+/]{43}=$')], verbose_name='public key')),
            ],
            options={
                'verbose_name': 'wireguard endpoint',
                'verbose_name_plural': 'wireguard endpoints',
            },
        ),
        migrations.CreateModel(
            name='Peer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True, validators=[django.core.validators.RegexValidator(message='Only upper/lowercase letters and numbers. Up to 32 characters allowed.', regex='^[A-Za-z0-9]{1,32}$')], verbose_name='name')),
                ('tunnel_ipv4', models.GenericIPAddressField(unique=True, verbose_name='tunnel ipv4')),
                ('tunnel_ipv6', models.GenericIPAddressField(unique=True, verbose_name='tunnel ipv6')),
                ('public_key', models.CharField(max_length=44, validators=[django.core.validators.RegexValidator(message='Invalid wireguard public key.', regex='^[A-Za-z0-9+/]{43}=$')], verbose_name='public key')),
                ('psk', models.CharField(blank=True, default=None, max_length=44, null=True, validators=[django.core.validators.RegexValidator(message='Invalid wireguard psk.', regex='^[A-Za-z0-9+/]{43}=$')], verbose_name='psk')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created')),
                ('valid', models.BooleanField(default=False, verbose_name='valid')),
                ('endpoint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='wpm.wireguardendpoint', verbose_name='wireguard endpoint')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='owner')),
            ],
            options={
                'verbose_name': 'peer',
                'verbose_name_plural': 'peers',
            },
        ),
    ]
